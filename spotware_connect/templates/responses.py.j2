from spotware_connect import protobuf as pb


class {{cname|default("Responses")}}(object):

    def _createResponse(self, proto_name, payload, fields):
        params = {f:getattr(payload, f) for f in fields if hasattr(payload, f)}
        method = getattr(self, proto_name)
        return method(**params)

    {% for name, fields in protobufs.items() %}
    {% set fnames = [] %}
    {% set params = [] %}
    {% set args = [] %}
        {% for fname, f in fields.items() if not fname == "payloadType" %}
            {% if f.has_default_value %}
                {% set x = args.append("%s=%s" % (fname, f.default_value)) %}
                {% set x = fnames.append(fname) %}
            {% else %}
                {% set x = params.append(fname) %}
                {% set x = fnames.append(fname) %}
            {% endif %}
        {% endfor %}
    def {{name|replace("ProtoOA", "")}}_(self, {{(params+args)|join(", ")}}):
        raise NotImplementedError("{{name}} not implemented")

    def {{name|replace("ProtoOA", "")}}(self, payload, msgid=None):
        fields = ["{{fnames|join("\", \"")}}"]
        return self._createResponse("{{name|replace("ProtoOA", "")}}_", payload, fields)

    {% endfor %}
