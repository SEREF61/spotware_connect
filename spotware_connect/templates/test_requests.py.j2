from twisted.trial import unittest
from twisted.test import proto_helpers
from spotware_connect import protocol, requests
from spotware_connect import protobuf as pb

class Testspotware_connect_requests(unittest.TestCase):
    """Tests for `spotware_connect.requests` package."""

    def setUp(self):
        """Set up test fixtures, if any."""
        self.tr = proto_helpers.StringTransport()
        self.proto = protocol.ConnectProtocol()
        self.proto.makeConnection(self.tr)
        self.r = requests.Requests(self.proto.send)

    def _assertRequest(self, payload_type, data={}):
        payload = payload_type(**data)
        pm = pb.payload_to_message(payload)
        self.assertIn(payload.SerializeToString(), self.tr.value())

    {% for name, fields in protobufs.items() %}
    {% set req = name|replace("ProtoOA", "") %}
    {% set params = [] %}
        {% for fname, f in fields.items() if not fname == "payloadType" %}
            {% if f.has_default_value %}
                {% set x = params.append("%s=%s" % (fname, f.default_value)) %}
            {% else %}
                {% if fname in ["accessToken", "clientId", "clientSecret", "comment", "label", "clientOrderId"] %}
                    {% set x = params.append(fname + '="X"') %}
                {% elif fname == "symbolId" and req in ["SubscribeDepthQuotesReq", "SubscribeSpotsReq", "SymbolByIdReq", "UnsubscribeDepthQuotesReq", "UnsubscribeSpotsReq"] %}
                    {% set x = params.append(fname + '=[1]') %}
                {% elif fname == "volume" and req in ["ExpectedMarginReq"] %}
                    {% set x = params.append(fname + '=[1]') %}
                {% elif fname == "marginCall" and req in ["MarginCallUpdateReq"] %}
                    {% set x = params.append(fname + '=pb.ProtoOAMarginCall(marginCallType=61, marginLevelThreshold=1)') %}
                {% else %}
                    {% set x = params.append(fname + '=1') %}
                {% endif %}
            {% endif %}
        {% endfor %}
    def test_{{req}}(self):
        """Test {{req}}"""
        data = dict({{params|join(", ")}})
        d = self.r.{{req|replace("Req", "")}}(**data)
        d.addCallback(self._assertRequest, data)
        d.callback(pb.{{name}})
        return d

    {% endfor %}
