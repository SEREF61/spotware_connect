from twisted.internet import defer
from spotware_connect import protobuf as pb


class Requests(object):

    reqSendFunc = None

    def __init__(self, reqSendFunc=None):
        self.reqSendFunc = reqSendFunc

    def create(self, proto_name, data):
        del data['self']
        proto = getattr(pb, proto_name)(**data)
        return proto

    def send(self, payload):
        if not self.reqSendFunc:
            return defer.fail(Exception("No send function"))

        return defer.maybeDeferred(self.reqSendFunc, payload)

    def createAndSend(self, proto_name, data):
        proto = self.create(proto_name, data)
        return self.send(proto)

    {% for name, fields in protobufs.items() %}
    {% set params = [] %}
    {% set args = [] %}
        {% for fname, f in fields.items() if not fname == "payloadType" %}
            {% if f.has_default_value %}
                {% set x = args.append("%s=%s" % (fname, f.default_value)) %}
            {% else %}
                {% set x = params.append(fname) %}
            {% endif %}
        {% endfor %}
    def {{name|replace("ProtoOA", "")|replace("Req", "")}}({{(["self"]+params+args)|join(", ")}}):
        return self.createAndSend("{{name}}", locals())

    {% endfor %}
